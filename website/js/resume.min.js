/*!
 * Start Bootstrap - Resume v4.0.0-beta.2 (https://startbootstrap.com/template-overviews/resume)
 * Copyright 2013-2017 Start Bootstrap
 * Licensed under MIT (https://github.com/BlackrockDigital/startbootstrap-resume/blob/master/LICENSE)
 */
!(function ($) {
    "use strict";

    // Smooth scrolling using jQuery easing
    $('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function () {
        if (
            location.pathname.replace(/^\//, "") == this.pathname.replace(/^\//, "") &&
            location.hostname == this.hostname
        ) {
            var target = $(this.hash);
            if ((target = target.length ? target : $("[name=" + this.hash.slice(1) + "]")).length) {
                $("html, body").animate(
                    {
                        scrollTop: target.offset().top,
                    },
                    1000,
                    "easeInOutExpo"
                );
                return false;
            }
        }
    });

    // Closes responsive menu when a scroll trigger link is clicked
    $(".js-scroll-trigger").click(function () {
        $(".navbar-collapse").collapse("hide");
    });

    // Activate scrollspy to add active class to navbar items on scroll
    $("body").scrollspy({
        target: "#sideNav",
    });
})(jQuery);
// My Custom Javascript Code
const counterElement = document.querySelector(".view-number");

async function fetchViewCount() {
    try {
        const response = await fetch("https://nudslulhoa7o72qmqjwooxt4zm0dtkpm.lambda-url.us-east-1.on.aws/");
        if (!response.ok) {
            throw new Error("Failed to fetch view count");
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("An error occurred while fetching view count:", error);
        return null;
    }
}

async function updateCounter() {
    const viewCount = await fetchViewCount();
    if (viewCount !== null) {
        // Check if counterElement exists before setting its textContent
        if (counterElement !== null) {
            counterElement.textContent = `Views: ${viewCount}`;
        } else {
            console.error("Error: counterElement is null.");
        }
    } else {
        // Check if counterElement exists before setting its textContent
        if (counterElement !== null) {
            counterElement.textContent = "Failed to fetch view count";
        } else {
            console.error("Error: counterElement is null.");
        }
    }
}

// Call the updateCounter function to initiate the update process
document.addEventListener('DOMContentLoaded', function() {
    // Wait for the DOM content to be fully loaded before calling updateCounter
    updateCounter();
});


